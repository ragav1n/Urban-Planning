-- Establish proper relationships between compliance_reports, grievances, and profiles tables

-- First, ensure the email column exists in profiles table
ALTER TABLE profiles 
ADD COLUMN IF NOT EXISTS email TEXT;

-- Create indexes for better performance on foreign key relationships
CREATE INDEX IF NOT EXISTS idx_compliance_reports_user_id ON compliance_reports(user_id);
CREATE INDEX IF NOT EXISTS idx_grievances_user_id ON grievances(user_id);
CREATE INDEX IF NOT EXISTS idx_profiles_id ON profiles(id);
CREATE INDEX IF NOT EXISTS idx_profiles_email ON profiles(email);

-- Add proper foreign key constraints if they don't exist
-- Note: These might already exist, so we use IF NOT EXISTS equivalent

-- For compliance_reports table
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'compliance_reports_user_id_fkey' 
        AND table_name = 'compliance_reports'
    ) THEN
        ALTER TABLE compliance_reports 
        ADD CONSTRAINT compliance_reports_user_id_fkey 
        FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;
    END IF;
END $$;

-- For grievances table
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'grievances_user_id_fkey' 
        AND table_name = 'grievances'
    ) THEN
        ALTER TABLE grievances 
        ADD CONSTRAINT grievances_user_id_fkey 
        FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;
    END IF;
END $$;

-- For profiles table
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'profiles_id_fkey' 
        AND table_name = 'profiles'
    ) THEN
        ALTER TABLE profiles 
        ADD CONSTRAINT profiles_id_fkey 
        FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;
    END IF;
END $$;

-- Create a view to easily join user data across all tables
CREATE OR REPLACE VIEW user_activity_summary AS
SELECT 
    p.id as user_id,
    p.name,
    p.email,
    p.created_at as profile_created_at,
    COUNT(DISTINCT cr.id) as total_compliance_reports,
    COUNT(DISTINCT g.id) as total_grievances,
    MAX(cr.created_at) as last_compliance_report,
    MAX(g.created_at) as last_grievance,
    COALESCE(COUNT(DISTINCT cr.id), 0) + COALESCE(COUNT(DISTINCT g.id), 0) as total_activities
FROM profiles p
LEFT JOIN compliance_reports cr ON p.id = cr.user_id
LEFT JOIN grievances g ON p.id = g.user_id
GROUP BY p.id, p.name, p.email, p.created_at;

-- Create indexes on the view for better performance
CREATE INDEX IF NOT EXISTS idx_user_activity_summary_user_id ON profiles(id);
CREATE INDEX IF NOT EXISTS idx_user_activity_summary_total_activities ON profiles(id);

-- Update existing profiles with email from auth.users if missing
UPDATE profiles 
SET email = auth.users.email, 
    updated_at = NOW()
FROM auth.users 
WHERE profiles.id = auth.users.id 
AND profiles.email IS NULL;

-- Add comments for documentation
COMMENT ON VIEW user_activity_summary IS 'Summary view showing user profile data with compliance reports and grievances counts';
COMMENT ON TABLE compliance_reports IS 'Stores compliance analysis reports generated by users';
COMMENT ON TABLE grievances IS 'Stores grievance reports submitted by users with images and descriptions';
COMMENT ON TABLE profiles IS 'User profile information linked to auth.users';
